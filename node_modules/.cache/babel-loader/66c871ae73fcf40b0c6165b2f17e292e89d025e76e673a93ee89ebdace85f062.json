{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../mime-node/le-windows');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass SESTransport extends EventEmitter {\n  constructor(options) {\n    super();\n    options = options || {};\n    this.options = options || {};\n    this.ses = this.options.SES;\n    this.name = 'SESTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'ses-transport'\n    });\n\n    // parallel sending connections\n    this.maxConnections = Number(this.options.maxConnections) || Infinity;\n    this.connections = 0;\n\n    // max messages per second\n    this.sendingRate = Number(this.options.sendingRate) || Infinity;\n    this.sendingRateTTL = null;\n    this.rateInterval = 1000; // milliseconds\n    this.rateMessages = [];\n    this.pending = [];\n    this.idling = true;\n    setImmediate(() => {\n      if (this.idling) {\n        this.emit('idle');\n      }\n    });\n  }\n\n  /**\n   * Schedules a sending of a message\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  send(mail, callback) {\n    var _this = this;\n    if (this.connections >= this.maxConnections) {\n      this.idling = false;\n      return this.pending.push({\n        mail,\n        callback\n      });\n    }\n    if (!this._checkSendingRate()) {\n      this.idling = false;\n      return this.pending.push({\n        mail,\n        callback\n      });\n    }\n    this._send(mail, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      setImmediate(() => callback(...args));\n      _this._sent();\n    });\n  }\n  _checkRatedQueue() {\n    var _this2 = this;\n    if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n      return;\n    }\n    if (!this.pending.length) {\n      if (!this.idling) {\n        this.idling = true;\n        this.emit('idle');\n      }\n      return;\n    }\n    let next = this.pending.shift();\n    this._send(next.mail, function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      setImmediate(() => next.callback(...args));\n      _this2._sent();\n    });\n  }\n  _checkSendingRate() {\n    clearTimeout(this.sendingRateTTL);\n    let now = Date.now();\n    let oldest = false;\n    // delete older messages\n    for (let i = this.rateMessages.length - 1; i >= 0; i--) {\n      if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n        oldest = this.rateMessages[i].ts;\n      }\n      if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n        this.rateMessages.splice(i, 1);\n      }\n    }\n    if (this.rateMessages.length < this.sendingRate) {\n      return true;\n    }\n    let delay = Math.max(oldest + 1001, now + 20);\n    this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);\n    try {\n      this.sendingRateTTL.unref();\n    } catch (E) {\n      // Ignore. Happens on envs with non-node timer implementation\n    }\n    return false;\n  }\n  _sent() {\n    this.connections--;\n    this._checkRatedQueue();\n  }\n\n  /**\n   * Returns true if there are free slots in the queue\n   */\n  isIdle() {\n    return this.idling;\n  }\n\n  /**\n   * Compiles a mailcomposer message and forwards it to SES\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  _send(mail, callback) {\n    let statObject = {\n      ts: Date.now(),\n      pending: true\n    };\n    this.connections++;\n    this.rateMessages.push(statObject);\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n    this.logger.info({\n      tnx: 'send',\n      messageId\n    }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n    let getRawMessage = next => {\n      // do not use Message-ID and Date in DKIM signature\n      if (!mail.data._dkim) {\n        mail.data._dkim = {};\n      }\n      if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n        mail.data._dkim.skipFields += ':date:message-id';\n      } else {\n        mail.data._dkim.skipFields = 'date:message-id';\n      }\n      let sourceStream = mail.message.createReadStream();\n      let stream = sourceStream.pipe(new LeWindows());\n      let chunks = [];\n      let chunklen = 0;\n      stream.on('readable', () => {\n        let chunk;\n        while ((chunk = stream.read()) !== null) {\n          chunks.push(chunk);\n          chunklen += chunk.length;\n        }\n      });\n      sourceStream.once('error', err => stream.emit('error', err));\n      stream.once('error', err => {\n        next(err);\n      });\n      stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n    };\n    setImmediate(() => getRawMessage((err, raw) => {\n      if (err) {\n        this.logger.error({\n          err,\n          tnx: 'send',\n          messageId\n        }, 'Failed creating message for %s. %s', messageId, err.message);\n        statObject.pending = false;\n        return callback(err);\n      }\n      let sesMessage = {\n        RawMessage: {\n          // required\n          Data: raw // required\n        },\n\n        Source: envelope.from,\n        Destinations: envelope.to\n      };\n      Object.keys(mail.data.ses || {}).forEach(key => {\n        sesMessage[key] = mail.data.ses[key];\n      });\n      let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n      let aws = this.ses.aws || {};\n      let getRegion = cb => {\n        if (ses.config && typeof ses.config.region === 'function') {\n          // promise\n          return ses.config.region().then(region => cb(null, region)).catch(err => cb(err));\n        }\n        return cb(null, ses.config && ses.config.region || 'us-east-1');\n      };\n      getRegion((err, region) => {\n        if (err || !region) {\n          region = 'us-east-1';\n        }\n        let sendPromise;\n        if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n          // v3 API\n          sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n        } else {\n          // v2 API\n          sendPromise = ses.sendRawEmail(sesMessage).promise();\n        }\n        sendPromise.then(data => {\n          if (region === 'us-east-1') {\n            region = 'email';\n          }\n          statObject.pending = false;\n          callback(null, {\n            envelope: {\n              from: envelope.from,\n              to: envelope.to\n            },\n            messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n            response: data.MessageId,\n            raw\n          });\n        }).catch(err => {\n          this.logger.error({\n            err,\n            tnx: 'send'\n          }, 'Send error for %s: %s', messageId, err.message);\n          statObject.pending = false;\n          callback(err);\n        });\n      });\n    }));\n  }\n\n  /**\n   * Verifies SES configuration\n   *\n   * @param {Function} callback Callback function\n   */\n  verify(callback) {\n    let promise;\n    let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n    let aws = this.ses.aws || {};\n    const sesMessage = {\n      RawMessage: {\n        // required\n        Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n      },\n      Source: 'invalid@invalid',\n      Destinations: ['invalid@invalid']\n    };\n    if (!callback) {\n      promise = new Promise((resolve, reject) => {\n        callback = shared.callbackPromise(resolve, reject);\n      });\n    }\n    const cb = err => {\n      if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n        return callback(err);\n      }\n      return callback(null, true);\n    };\n    if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n      // v3 API\n      sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n      ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n    } else {\n      // v2 API\n      ses.sendRawEmail(sesMessage, cb);\n    }\n    return promise;\n  }\n}\nmodule.exports = SESTransport;","map":{"version":3,"names":["EventEmitter","require","packageData","shared","LeWindows","SESTransport","constructor","options","ses","SES","name","version","logger","getLogger","component","maxConnections","Number","Infinity","connections","sendingRate","sendingRateTTL","rateInterval","rateMessages","pending","idling","setImmediate","emit","send","mail","callback","_this","push","_checkSendingRate","_send","_len","arguments","length","args","Array","_key","_sent","_checkRatedQueue","_this2","next","shift","_len2","_key2","clearTimeout","now","Date","oldest","i","ts","splice","delay","Math","max","setTimeout","unref","E","isIdle","statObject","envelope","data","message","getEnvelope","messageId","recipients","concat","to","info","tnx","join","getRawMessage","_dkim","skipFields","sourceStream","createReadStream","stream","pipe","chunks","chunklen","on","chunk","read","once","err","Buffer","raw","error","sesMessage","RawMessage","Data","Source","from","Destinations","Object","keys","forEach","key","aws","getRegion","cb","config","region","then","catch","sendPromise","SendRawEmailCommand","sendRawEmail","promise","MessageId","test","response","verify","Promise","resolve","reject","callbackPromise","code","Code","module","exports"],"sources":["/Users/waqasahmad/Desktop/CSS/Fiverr/updated-code/node_modules/nodemailer/lib/ses-transport/index.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../mime-node/le-windows');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass SESTransport extends EventEmitter {\n    constructor(options) {\n        super();\n        options = options || {};\n\n        this.options = options || {};\n        this.ses = this.options.SES;\n\n        this.name = 'SESTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'ses-transport'\n        });\n\n        // parallel sending connections\n        this.maxConnections = Number(this.options.maxConnections) || Infinity;\n        this.connections = 0;\n\n        // max messages per second\n        this.sendingRate = Number(this.options.sendingRate) || Infinity;\n        this.sendingRateTTL = null;\n        this.rateInterval = 1000; // milliseconds\n        this.rateMessages = [];\n\n        this.pending = [];\n\n        this.idling = true;\n\n        setImmediate(() => {\n            if (this.idling) {\n                this.emit('idle');\n            }\n        });\n    }\n\n    /**\n     * Schedules a sending of a message\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, callback) {\n        if (this.connections >= this.maxConnections) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        if (!this._checkSendingRate()) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        this._send(mail, (...args) => {\n            setImmediate(() => callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkRatedQueue() {\n        if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n            return;\n        }\n\n        if (!this.pending.length) {\n            if (!this.idling) {\n                this.idling = true;\n                this.emit('idle');\n            }\n            return;\n        }\n\n        let next = this.pending.shift();\n        this._send(next.mail, (...args) => {\n            setImmediate(() => next.callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkSendingRate() {\n        clearTimeout(this.sendingRateTTL);\n\n        let now = Date.now();\n        let oldest = false;\n        // delete older messages\n        for (let i = this.rateMessages.length - 1; i >= 0; i--) {\n            if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n                oldest = this.rateMessages[i].ts;\n            }\n\n            if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n                this.rateMessages.splice(i, 1);\n            }\n        }\n\n        if (this.rateMessages.length < this.sendingRate) {\n            return true;\n        }\n\n        let delay = Math.max(oldest + 1001, now + 20);\n        this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);\n\n        try {\n            this.sendingRateTTL.unref();\n        } catch (E) {\n            // Ignore. Happens on envs with non-node timer implementation\n        }\n\n        return false;\n    }\n\n    _sent() {\n        this.connections--;\n        this._checkRatedQueue();\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n    isIdle() {\n        return this.idling;\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    _send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n        this.connections++;\n        this.rateMessages.push(statObject);\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        let getRawMessage = next => {\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n                mail.data._dkim.skipFields += ':date:message-id';\n            } else {\n                mail.data._dkim.skipFields = 'date:message-id';\n            }\n\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            sourceStream.once('error', err => stream.emit('error', err));\n\n            stream.once('error', err => {\n                next(err);\n            });\n\n            stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n        };\n\n        setImmediate(() =>\n            getRawMessage((err, raw) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    statObject.pending = false;\n                    return callback(err);\n                }\n\n                let sesMessage = {\n                    RawMessage: {\n                        // required\n                        Data: raw // required\n                    },\n                    Source: envelope.from,\n                    Destinations: envelope.to\n                };\n\n                Object.keys(mail.data.ses || {}).forEach(key => {\n                    sesMessage[key] = mail.data.ses[key];\n                });\n\n                let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n                let aws = this.ses.aws || {};\n\n                let getRegion = cb => {\n                    if (ses.config && typeof ses.config.region === 'function') {\n                        // promise\n                        return ses.config\n                            .region()\n                            .then(region => cb(null, region))\n                            .catch(err => cb(err));\n                    }\n                    return cb(null, (ses.config && ses.config.region) || 'us-east-1');\n                };\n\n                getRegion((err, region) => {\n                    if (err || !region) {\n                        region = 'us-east-1';\n                    }\n\n                    let sendPromise;\n                    if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n                        // v3 API\n                        sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n                    } else {\n                        // v2 API\n                        sendPromise = ses.sendRawEmail(sesMessage).promise();\n                    }\n\n                    sendPromise\n                        .then(data => {\n                            if (region === 'us-east-1') {\n                                region = 'email';\n                            }\n\n                            statObject.pending = false;\n                            callback(null, {\n                                envelope: {\n                                    from: envelope.from,\n                                    to: envelope.to\n                                },\n                                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                                response: data.MessageId,\n                                raw\n                            });\n                        })\n                        .catch(err => {\n                            this.logger.error(\n                                {\n                                    err,\n                                    tnx: 'send'\n                                },\n                                'Send error for %s: %s',\n                                messageId,\n                                err.message\n                            );\n                            statObject.pending = false;\n                            callback(err);\n                        });\n                });\n            })\n        );\n    }\n\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n        let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n        let aws = this.ses.aws || {};\n\n        const sesMessage = {\n            RawMessage: {\n                // required\n                Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n            },\n            Source: 'invalid@invalid',\n            Destinations: ['invalid@invalid']\n        };\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        const cb = err => {\n            if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n                return callback(err);\n            }\n            return callback(null, true);\n        };\n\n        if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n            // v3 API\n            sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n            ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n        } else {\n            // v2 API\n            ses.sendRawEmail(sesMessage, cb);\n        }\n\n        return promise;\n    }\n}\n\nmodule.exports = SESTransport;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACtC,MAAMC,WAAW,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACjD,MAAME,MAAM,GAAGF,OAAO,CAAC,WAAW,CAAC;AACnC,MAAMG,SAAS,GAAGH,OAAO,CAAC,yBAAyB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,YAAY,SAASL,YAAY,CAAC;EACpCM,WAAWA,CAACC,OAAO,EAAE;IACjB,KAAK,EAAE;IACPA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAEvB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAC5B,IAAI,CAACC,GAAG,GAAG,IAAI,CAACD,OAAO,CAACE,GAAG;IAE3B,IAAI,CAACC,IAAI,GAAG,cAAc;IAC1B,IAAI,CAACC,OAAO,GAAGT,WAAW,CAACS,OAAO;IAElC,IAAI,CAACC,MAAM,GAAGT,MAAM,CAACU,SAAS,CAAC,IAAI,CAACN,OAAO,EAAE;MACzCO,SAAS,EAAE,IAAI,CAACP,OAAO,CAACO,SAAS,IAAI;IACzC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,cAAc,GAAGC,MAAM,CAAC,IAAI,CAACT,OAAO,CAACQ,cAAc,CAAC,IAAIE,QAAQ;IACrE,IAAI,CAACC,WAAW,GAAG,CAAC;;IAEpB;IACA,IAAI,CAACC,WAAW,GAAGH,MAAM,CAAC,IAAI,CAACT,OAAO,CAACY,WAAW,CAAC,IAAIF,QAAQ;IAC/D,IAAI,CAACG,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,YAAY,GAAG,IAAI,CAAC,CAAC;IAC1B,IAAI,CAACC,YAAY,GAAG,EAAE;IAEtB,IAAI,CAACC,OAAO,GAAG,EAAE;IAEjB,IAAI,CAACC,MAAM,GAAG,IAAI;IAElBC,YAAY,CAAC,MAAM;MACf,IAAI,IAAI,CAACD,MAAM,EAAE;QACb,IAAI,CAACE,IAAI,CAAC,MAAM,CAAC;MACrB;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,IAAIA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAAA,IAAAC,KAAA;IACjB,IAAI,IAAI,CAACZ,WAAW,IAAI,IAAI,CAACH,cAAc,EAAE;MACzC,IAAI,CAACS,MAAM,GAAG,KAAK;MACnB,OAAO,IAAI,CAACD,OAAO,CAACQ,IAAI,CAAC;QACrBH,IAAI;QACJC;MACJ,CAAC,CAAC;IACN;IAEA,IAAI,CAAC,IAAI,CAACG,iBAAiB,EAAE,EAAE;MAC3B,IAAI,CAACR,MAAM,GAAG,KAAK;MACnB,OAAO,IAAI,CAACD,OAAO,CAACQ,IAAI,CAAC;QACrBH,IAAI;QACJC;MACJ,CAAC,CAAC;IACN;IAEA,IAAI,CAACI,KAAK,CAACL,IAAI,EAAE,YAAa;MAAA,SAAAM,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MACrBd,YAAY,CAAC,MAAMI,QAAQ,CAAC,GAAGQ,IAAI,CAAC,CAAC;MACrCP,KAAI,CAACU,KAAK,EAAE;IAChB,CAAC,CAAC;EACN;EAEAC,gBAAgBA,CAAA,EAAG;IAAA,IAAAC,MAAA;IACf,IAAI,IAAI,CAACxB,WAAW,IAAI,IAAI,CAACH,cAAc,IAAI,CAAC,IAAI,CAACiB,iBAAiB,EAAE,EAAE;MACtE;IACJ;IAEA,IAAI,CAAC,IAAI,CAACT,OAAO,CAACa,MAAM,EAAE;MACtB,IAAI,CAAC,IAAI,CAACZ,MAAM,EAAE;QACd,IAAI,CAACA,MAAM,GAAG,IAAI;QAClB,IAAI,CAACE,IAAI,CAAC,MAAM,CAAC;MACrB;MACA;IACJ;IAEA,IAAIiB,IAAI,GAAG,IAAI,CAACpB,OAAO,CAACqB,KAAK,EAAE;IAC/B,IAAI,CAACX,KAAK,CAACU,IAAI,CAACf,IAAI,EAAE,YAAa;MAAA,SAAAiB,KAAA,GAAAV,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAO,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJT,IAAI,CAAAS,KAAA,IAAAX,SAAA,CAAAW,KAAA;MAAA;MAC1BrB,YAAY,CAAC,MAAMkB,IAAI,CAACd,QAAQ,CAAC,GAAGQ,IAAI,CAAC,CAAC;MAC1CK,MAAI,CAACF,KAAK,EAAE;IAChB,CAAC,CAAC;EACN;EAEAR,iBAAiBA,CAAA,EAAG;IAChBe,YAAY,CAAC,IAAI,CAAC3B,cAAc,CAAC;IAEjC,IAAI4B,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE;IACpB,IAAIE,MAAM,GAAG,KAAK;IAClB;IACA,KAAK,IAAIC,CAAC,GAAG,IAAI,CAAC7B,YAAY,CAACc,MAAM,GAAG,CAAC,EAAEe,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACpD,IAAI,IAAI,CAAC7B,YAAY,CAAC6B,CAAC,CAAC,CAACC,EAAE,IAAIJ,GAAG,GAAG,IAAI,CAAC3B,YAAY,KAAK,CAAC6B,MAAM,IAAI,IAAI,CAAC5B,YAAY,CAAC6B,CAAC,CAAC,CAACC,EAAE,GAAGF,MAAM,CAAC,EAAE;QACrGA,MAAM,GAAG,IAAI,CAAC5B,YAAY,CAAC6B,CAAC,CAAC,CAACC,EAAE;MACpC;MAEA,IAAI,IAAI,CAAC9B,YAAY,CAAC6B,CAAC,CAAC,CAACC,EAAE,GAAGJ,GAAG,GAAG,IAAI,CAAC3B,YAAY,IAAI,CAAC,IAAI,CAACC,YAAY,CAAC6B,CAAC,CAAC,CAAC5B,OAAO,EAAE;QACpF,IAAI,CAACD,YAAY,CAAC+B,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;MAClC;IACJ;IAEA,IAAI,IAAI,CAAC7B,YAAY,CAACc,MAAM,GAAG,IAAI,CAACjB,WAAW,EAAE;MAC7C,OAAO,IAAI;IACf;IAEA,IAAImC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACN,MAAM,GAAG,IAAI,EAAEF,GAAG,GAAG,EAAE,CAAC;IAC7C,IAAI,CAAC5B,cAAc,GAAGqC,UAAU,CAAC,MAAM,IAAI,CAAChB,gBAAgB,EAAE,EAAEO,GAAG,GAAGM,KAAK,CAAC;IAE5E,IAAI;MACA,IAAI,CAAClC,cAAc,CAACsC,KAAK,EAAE;IAC/B,CAAC,CAAC,OAAOC,CAAC,EAAE;MACR;IAAA;IAGJ,OAAO,KAAK;EAChB;EAEAnB,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACtB,WAAW,EAAE;IAClB,IAAI,CAACuB,gBAAgB,EAAE;EAC3B;;EAEA;AACJ;AACA;EACImB,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACpC,MAAM;EACtB;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIS,KAAKA,CAACL,IAAI,EAAEC,QAAQ,EAAE;IAClB,IAAIgC,UAAU,GAAG;MACbT,EAAE,EAAEH,IAAI,CAACD,GAAG,EAAE;MACdzB,OAAO,EAAE;IACb,CAAC;IACD,IAAI,CAACL,WAAW,EAAE;IAClB,IAAI,CAACI,YAAY,CAACS,IAAI,CAAC8B,UAAU,CAAC;IAElC,IAAIC,QAAQ,GAAGlC,IAAI,CAACmC,IAAI,CAACD,QAAQ,IAAIlC,IAAI,CAACoC,OAAO,CAACC,WAAW,EAAE;IAC/D,IAAIC,SAAS,GAAGtC,IAAI,CAACoC,OAAO,CAACE,SAAS,EAAE;IAExC,IAAIC,UAAU,GAAG,EAAE,CAACC,MAAM,CAACN,QAAQ,CAACO,EAAE,IAAI,EAAE,CAAC;IAC7C,IAAIF,UAAU,CAAC/B,MAAM,GAAG,CAAC,EAAE;MACvB+B,UAAU,CAACpC,IAAI,CAAC,SAAS,GAAGoC,UAAU,CAACd,MAAM,CAAC,CAAC,CAAC,CAACjB,MAAM,GAAG,OAAO,CAAC;IACtE;IACA,IAAI,CAACxB,MAAM,CAAC0D,IAAI,CACZ;MACIC,GAAG,EAAE,MAAM;MACXL;IACJ,CAAC,EACD,4BAA4B,EAC5BA,SAAS,EACTC,UAAU,CAACK,IAAI,CAAC,IAAI,CAAC,CACxB;IAED,IAAIC,aAAa,GAAG9B,IAAI,IAAI;MACxB;MACA,IAAI,CAACf,IAAI,CAACmC,IAAI,CAACW,KAAK,EAAE;QAClB9C,IAAI,CAACmC,IAAI,CAACW,KAAK,GAAG,CAAC,CAAC;MACxB;MACA,IAAI9C,IAAI,CAACmC,IAAI,CAACW,KAAK,CAACC,UAAU,IAAI,OAAO/C,IAAI,CAACmC,IAAI,CAACW,KAAK,CAACC,UAAU,KAAK,QAAQ,EAAE;QAC9E/C,IAAI,CAACmC,IAAI,CAACW,KAAK,CAACC,UAAU,IAAI,kBAAkB;MACpD,CAAC,MAAM;QACH/C,IAAI,CAACmC,IAAI,CAACW,KAAK,CAACC,UAAU,GAAG,iBAAiB;MAClD;MAEA,IAAIC,YAAY,GAAGhD,IAAI,CAACoC,OAAO,CAACa,gBAAgB,EAAE;MAClD,IAAIC,MAAM,GAAGF,YAAY,CAACG,IAAI,CAAC,IAAI3E,SAAS,EAAE,CAAC;MAC/C,IAAI4E,MAAM,GAAG,EAAE;MACf,IAAIC,QAAQ,GAAG,CAAC;MAEhBH,MAAM,CAACI,EAAE,CAAC,UAAU,EAAE,MAAM;QACxB,IAAIC,KAAK;QACT,OAAO,CAACA,KAAK,GAAGL,MAAM,CAACM,IAAI,EAAE,MAAM,IAAI,EAAE;UACrCJ,MAAM,CAACjD,IAAI,CAACoD,KAAK,CAAC;UAClBF,QAAQ,IAAIE,KAAK,CAAC/C,MAAM;QAC5B;MACJ,CAAC,CAAC;MAEFwC,YAAY,CAACS,IAAI,CAAC,OAAO,EAAEC,GAAG,IAAIR,MAAM,CAACpD,IAAI,CAAC,OAAO,EAAE4D,GAAG,CAAC,CAAC;MAE5DR,MAAM,CAACO,IAAI,CAAC,OAAO,EAAEC,GAAG,IAAI;QACxB3C,IAAI,CAAC2C,GAAG,CAAC;MACb,CAAC,CAAC;MAEFR,MAAM,CAACO,IAAI,CAAC,KAAK,EAAE,MAAM1C,IAAI,CAAC,IAAI,EAAE4C,MAAM,CAACnB,MAAM,CAACY,MAAM,EAAEC,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEDxD,YAAY,CAAC,MACTgD,aAAa,CAAC,CAACa,GAAG,EAAEE,GAAG,KAAK;MACxB,IAAIF,GAAG,EAAE;QACL,IAAI,CAAC1E,MAAM,CAAC6E,KAAK,CACb;UACIH,GAAG;UACHf,GAAG,EAAE,MAAM;UACXL;QACJ,CAAC,EACD,oCAAoC,EACpCA,SAAS,EACToB,GAAG,CAACtB,OAAO,CACd;QACDH,UAAU,CAACtC,OAAO,GAAG,KAAK;QAC1B,OAAOM,QAAQ,CAACyD,GAAG,CAAC;MACxB;MAEA,IAAII,UAAU,GAAG;QACbC,UAAU,EAAE;UACR;UACAC,IAAI,EAAEJ,GAAG,CAAC;QACd,CAAC;;QACDK,MAAM,EAAE/B,QAAQ,CAACgC,IAAI;QACrBC,YAAY,EAAEjC,QAAQ,CAACO;MAC3B,CAAC;MAED2B,MAAM,CAACC,IAAI,CAACrE,IAAI,CAACmC,IAAI,CAACvD,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC0F,OAAO,CAACC,GAAG,IAAI;QAC5CT,UAAU,CAACS,GAAG,CAAC,GAAGvE,IAAI,CAACmC,IAAI,CAACvD,GAAG,CAAC2F,GAAG,CAAC;MACxC,CAAC,CAAC;MAEF,IAAI3F,GAAG,GAAG,CAAC,IAAI,CAACA,GAAG,CAAC4F,GAAG,GAAG,IAAI,CAAC5F,GAAG,CAACA,GAAG,GAAG,IAAI,CAACA,GAAG,KAAK,CAAC,CAAC;MACxD,IAAI4F,GAAG,GAAG,IAAI,CAAC5F,GAAG,CAAC4F,GAAG,IAAI,CAAC,CAAC;MAE5B,IAAIC,SAAS,GAAGC,EAAE,IAAI;QAClB,IAAI9F,GAAG,CAAC+F,MAAM,IAAI,OAAO/F,GAAG,CAAC+F,MAAM,CAACC,MAAM,KAAK,UAAU,EAAE;UACvD;UACA,OAAOhG,GAAG,CAAC+F,MAAM,CACZC,MAAM,EAAE,CACRC,IAAI,CAACD,MAAM,IAAIF,EAAE,CAAC,IAAI,EAAEE,MAAM,CAAC,CAAC,CAChCE,KAAK,CAACpB,GAAG,IAAIgB,EAAE,CAAChB,GAAG,CAAC,CAAC;QAC9B;QACA,OAAOgB,EAAE,CAAC,IAAI,EAAG9F,GAAG,CAAC+F,MAAM,IAAI/F,GAAG,CAAC+F,MAAM,CAACC,MAAM,IAAK,WAAW,CAAC;MACrE,CAAC;MAEDH,SAAS,CAAC,CAACf,GAAG,EAAEkB,MAAM,KAAK;QACvB,IAAIlB,GAAG,IAAI,CAACkB,MAAM,EAAE;UAChBA,MAAM,GAAG,WAAW;QACxB;QAEA,IAAIG,WAAW;QACf,IAAI,OAAOnG,GAAG,CAACmB,IAAI,KAAK,UAAU,IAAIyE,GAAG,CAACQ,mBAAmB,EAAE;UAC3D;UACAD,WAAW,GAAGnG,GAAG,CAACmB,IAAI,CAAC,IAAIyE,GAAG,CAACQ,mBAAmB,CAAClB,UAAU,CAAC,CAAC;QACnE,CAAC,MAAM;UACH;UACAiB,WAAW,GAAGnG,GAAG,CAACqG,YAAY,CAACnB,UAAU,CAAC,CAACoB,OAAO,EAAE;QACxD;QAEAH,WAAW,CACNF,IAAI,CAAC1C,IAAI,IAAI;UACV,IAAIyC,MAAM,KAAK,WAAW,EAAE;YACxBA,MAAM,GAAG,OAAO;UACpB;UAEA3C,UAAU,CAACtC,OAAO,GAAG,KAAK;UAC1BM,QAAQ,CAAC,IAAI,EAAE;YACXiC,QAAQ,EAAE;cACNgC,IAAI,EAAEhC,QAAQ,CAACgC,IAAI;cACnBzB,EAAE,EAAEP,QAAQ,CAACO;YACjB,CAAC;YACDH,SAAS,EAAE,GAAG,GAAGH,IAAI,CAACgD,SAAS,IAAI,CAAC,GAAG,CAACC,IAAI,CAACjD,IAAI,CAACgD,SAAS,CAAC,GAAG,GAAG,GAAGP,MAAM,GAAG,gBAAgB,GAAG,EAAE,CAAC,GAAG,GAAG;YAC1GS,QAAQ,EAAElD,IAAI,CAACgD,SAAS;YACxBvB;UACJ,CAAC,CAAC;QACN,CAAC,CAAC,CACDkB,KAAK,CAACpB,GAAG,IAAI;UACV,IAAI,CAAC1E,MAAM,CAAC6E,KAAK,CACb;YACIH,GAAG;YACHf,GAAG,EAAE;UACT,CAAC,EACD,uBAAuB,EACvBL,SAAS,EACToB,GAAG,CAACtB,OAAO,CACd;UACDH,UAAU,CAACtC,OAAO,GAAG,KAAK;UAC1BM,QAAQ,CAACyD,GAAG,CAAC;QACjB,CAAC,CAAC;MACV,CAAC,CAAC;IACN,CAAC,CAAC,CACL;EACL;;EAEA;AACJ;AACA;AACA;AACA;EACI4B,MAAMA,CAACrF,QAAQ,EAAE;IACb,IAAIiF,OAAO;IACX,IAAItG,GAAG,GAAG,CAAC,IAAI,CAACA,GAAG,CAAC4F,GAAG,GAAG,IAAI,CAAC5F,GAAG,CAACA,GAAG,GAAG,IAAI,CAACA,GAAG,KAAK,CAAC,CAAC;IACxD,IAAI4F,GAAG,GAAG,IAAI,CAAC5F,GAAG,CAAC4F,GAAG,IAAI,CAAC,CAAC;IAE5B,MAAMV,UAAU,GAAG;MACfC,UAAU,EAAE;QACR;QACAC,IAAI,EAAE;MACV,CAAC;MACDC,MAAM,EAAE,iBAAiB;MACzBE,YAAY,EAAE,CAAC,iBAAiB;IACpC,CAAC;IAED,IAAI,CAAClE,QAAQ,EAAE;MACXiF,OAAO,GAAG,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACvCxF,QAAQ,GAAG1B,MAAM,CAACmH,eAAe,CAACF,OAAO,EAAEC,MAAM,CAAC;MACtD,CAAC,CAAC;IACN;IACA,MAAMf,EAAE,GAAGhB,GAAG,IAAI;MACd,IAAIA,GAAG,IAAI,CAACA,GAAG,CAACiC,IAAI,IAAIjC,GAAG,CAACkC,IAAI,MAAM,uBAAuB,EAAE;QAC3D,OAAO3F,QAAQ,CAACyD,GAAG,CAAC;MACxB;MACA,OAAOzD,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;IAC/B,CAAC;IAED,IAAI,OAAOrB,GAAG,CAACmB,IAAI,KAAK,UAAU,IAAIyE,GAAG,CAACQ,mBAAmB,EAAE;MAC3D;MACAlB,UAAU,CAACC,UAAU,CAACC,IAAI,GAAGL,MAAM,CAACO,IAAI,CAACJ,UAAU,CAACC,UAAU,CAACC,IAAI,CAAC;MACpEpF,GAAG,CAACmB,IAAI,CAAC,IAAIyE,GAAG,CAACQ,mBAAmB,CAAClB,UAAU,CAAC,EAAEY,EAAE,CAAC;IACzD,CAAC,MAAM;MACH;MACA9F,GAAG,CAACqG,YAAY,CAACnB,UAAU,EAAEY,EAAE,CAAC;IACpC;IAEA,OAAOQ,OAAO;EAClB;AACJ;AAEAW,MAAM,CAACC,OAAO,GAAGrH,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}