{"ast":null,"code":"'use strict';\n\nconst shared = require('../shared');\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\nclass MailMessage {\n  constructor(mailer, data) {\n    this.mailer = mailer;\n    this.data = {};\n    this.message = null;\n    data = data || {};\n    let options = mailer.options || {};\n    let defaults = mailer._defaults || {};\n    Object.keys(data).forEach(key => {\n      this.data[key] = data[key];\n    });\n    this.data.headers = this.data.headers || {};\n\n    // apply defaults\n    Object.keys(defaults).forEach(key => {\n      if (!(key in this.data)) {\n        this.data[key] = defaults[key];\n      } else if (key === 'headers') {\n        // headers is a special case. Allow setting individual default headers\n        Object.keys(defaults.headers).forEach(key => {\n          if (!(key in this.data.headers)) {\n            this.data.headers[key] = defaults.headers[key];\n          }\n        });\n      }\n    });\n\n    // force specific keys from transporter options\n    ['disableFileAccess', 'disableUrlAccess', 'normalizeHeaderKey'].forEach(key => {\n      if (key in options) {\n        this.data[key] = options[key];\n      }\n    });\n  }\n  resolveContent() {\n    return shared.resolveContent(...arguments);\n  }\n  resolveAll(callback) {\n    let keys = [[this.data, 'html'], [this.data, 'text'], [this.data, 'watchHtml'], [this.data, 'amp'], [this.data, 'icalEvent']];\n    if (this.data.alternatives && this.data.alternatives.length) {\n      this.data.alternatives.forEach((alternative, i) => {\n        keys.push([this.data.alternatives, i]);\n      });\n    }\n    if (this.data.attachments && this.data.attachments.length) {\n      this.data.attachments.forEach((attachment, i) => {\n        if (!attachment.filename) {\n          attachment.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n          if (attachment.filename.indexOf('.') < 0) {\n            attachment.filename += '.' + mimeFuncs.detectExtension(attachment.contentType);\n          }\n        }\n        if (!attachment.contentType) {\n          attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');\n        }\n        keys.push([this.data.attachments, i]);\n      });\n    }\n    let mimeNode = new MimeNode();\n    let addressKeys = ['from', 'to', 'cc', 'bcc', 'sender', 'replyTo'];\n    addressKeys.forEach(address => {\n      let value;\n      if (this.message) {\n        value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === 'replyTo' ? 'reply-to' : address)) || []);\n      } else if (this.data[address]) {\n        value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);\n      }\n      if (value && value.length) {\n        this.data[address] = value;\n      } else if (address in this.data) {\n        this.data[address] = null;\n      }\n    });\n    let singleKeys = ['from', 'sender'];\n    singleKeys.forEach(address => {\n      if (this.data[address]) {\n        this.data[address] = this.data[address].shift();\n      }\n    });\n    let pos = 0;\n    let resolveNext = () => {\n      if (pos >= keys.length) {\n        return callback(null, this.data);\n      }\n      let args = keys[pos++];\n      if (!args[0] || !args[0][args[1]]) {\n        return resolveNext();\n      }\n      shared.resolveContent(...args, (err, value) => {\n        if (err) {\n          return callback(err);\n        }\n        let node = {\n          content: value\n        };\n        if (args[0][args[1]] && typeof args[0][args[1]] === 'object' && !Buffer.isBuffer(args[0][args[1]])) {\n          Object.keys(args[0][args[1]]).forEach(key => {\n            if (!(key in node) && !['content', 'path', 'href', 'raw'].includes(key)) {\n              node[key] = args[0][args[1]][key];\n            }\n          });\n        }\n        args[0][args[1]] = node;\n        resolveNext();\n      });\n    };\n    setImmediate(() => resolveNext());\n  }\n  normalize(callback) {\n    let envelope = this.data.envelope || this.message.getEnvelope();\n    let messageId = this.message.messageId();\n    this.resolveAll((err, data) => {\n      if (err) {\n        return callback(err);\n      }\n      data.envelope = envelope;\n      data.messageId = messageId;\n      ['html', 'text', 'watchHtml', 'amp'].forEach(key => {\n        if (data[key] && data[key].content) {\n          if (typeof data[key].content === 'string') {\n            data[key] = data[key].content;\n          } else if (Buffer.isBuffer(data[key].content)) {\n            data[key] = data[key].content.toString();\n          }\n        }\n      });\n      if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {\n        data.icalEvent.content = data.icalEvent.content.toString('base64');\n        data.icalEvent.encoding = 'base64';\n      }\n      if (data.alternatives && data.alternatives.length) {\n        data.alternatives.forEach(alternative => {\n          if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {\n            alternative.content = alternative.content.toString('base64');\n            alternative.encoding = 'base64';\n          }\n        });\n      }\n      if (data.attachments && data.attachments.length) {\n        data.attachments.forEach(attachment => {\n          if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {\n            attachment.content = attachment.content.toString('base64');\n            attachment.encoding = 'base64';\n          }\n        });\n      }\n      data.normalizedHeaders = {};\n      Object.keys(data.headers || {}).forEach(key => {\n        let value = [].concat(data.headers[key] || []).shift();\n        value = value && value.value || value;\n        if (value) {\n          if (['references', 'in-reply-to', 'message-id', 'content-id'].includes(key)) {\n            value = this.message._encodeHeaderValue(key, value);\n          }\n          data.normalizedHeaders[key] = value;\n        }\n      });\n      if (data.list && typeof data.list === 'object') {\n        let listHeaders = this._getListHeaders(data.list);\n        listHeaders.forEach(entry => {\n          data.normalizedHeaders[entry.key] = entry.value.map(val => val && val.value || val).join(', ');\n        });\n      }\n      if (data.references) {\n        data.normalizedHeaders.references = this.message._encodeHeaderValue('references', data.references);\n      }\n      if (data.inReplyTo) {\n        data.normalizedHeaders['in-reply-to'] = this.message._encodeHeaderValue('in-reply-to', data.inReplyTo);\n      }\n      return callback(null, data);\n    });\n  }\n  setMailerHeader() {\n    if (!this.message || !this.data.xMailer) {\n      return;\n    }\n    this.message.setHeader('X-Mailer', this.data.xMailer);\n  }\n  setPriorityHeaders() {\n    if (!this.message || !this.data.priority) {\n      return;\n    }\n    switch ((this.data.priority || '').toString().toLowerCase()) {\n      case 'high':\n        this.message.setHeader('X-Priority', '1 (Highest)');\n        this.message.setHeader('X-MSMail-Priority', 'High');\n        this.message.setHeader('Importance', 'High');\n        break;\n      case 'low':\n        this.message.setHeader('X-Priority', '5 (Lowest)');\n        this.message.setHeader('X-MSMail-Priority', 'Low');\n        this.message.setHeader('Importance', 'Low');\n        break;\n      default:\n      // do not add anything, since all messages are 'Normal' by default\n    }\n  }\n\n  setListHeaders() {\n    if (!this.message || !this.data.list || typeof this.data.list !== 'object') {\n      return;\n    }\n    // add optional List-* headers\n    if (this.data.list && typeof this.data.list === 'object') {\n      this._getListHeaders(this.data.list).forEach(listHeader => {\n        listHeader.value.forEach(value => {\n          this.message.addHeader(listHeader.key, value);\n        });\n      });\n    }\n  }\n  _getListHeaders(listData) {\n    // make sure an url looks like <protocol:url>\n    return Object.keys(listData).map(key => ({\n      key: 'list-' + key.toLowerCase().trim(),\n      value: [].concat(listData[key] || []).map(value => ({\n        prepared: true,\n        foldLines: true,\n        value: [].concat(value || []).map(value => {\n          if (typeof value === 'string') {\n            value = {\n              url: value\n            };\n          }\n          if (value && value.url) {\n            if (key.toLowerCase().trim() === 'id') {\n              // List-ID: \"comment\" <domain>\n              let comment = value.comment || '';\n              if (mimeFuncs.isPlainText(comment)) {\n                comment = '\"' + comment + '\"';\n              } else {\n                comment = mimeFuncs.encodeWord(comment);\n              }\n              return (value.comment ? comment + ' ' : '') + this._formatListUrl(value.url).replace(/^<[^:]+\\/{,2}/, '');\n            }\n\n            // List-*: <http://domain> (comment)\n            let comment = value.comment || '';\n            if (!mimeFuncs.isPlainText(comment)) {\n              comment = mimeFuncs.encodeWord(comment);\n            }\n            return this._formatListUrl(value.url) + (value.comment ? ' (' + comment + ')' : '');\n          }\n          return '';\n        }).filter(value => value).join(', ')\n      }))\n    }));\n  }\n  _formatListUrl(url) {\n    url = url.replace(/[\\s<]+|[\\s>]+/g, '');\n    if (/^(https?|mailto|ftp):/.test(url)) {\n      return '<' + url + '>';\n    }\n    if (/^[^@]+@[^@]+$/.test(url)) {\n      return '<mailto:' + url + '>';\n    }\n    return '<http://' + url + '>';\n  }\n}\nmodule.exports = MailMessage;","map":{"version":3,"names":["shared","require","MimeNode","mimeFuncs","MailMessage","constructor","mailer","data","message","options","defaults","_defaults","Object","keys","forEach","key","headers","resolveContent","arguments","resolveAll","callback","alternatives","length","alternative","i","push","attachments","attachment","filename","path","href","split","pop","shift","indexOf","detectExtension","contentType","detectMimeType","mimeNode","addressKeys","address","value","concat","_parseAddresses","getHeader","singleKeys","pos","resolveNext","args","err","node","content","Buffer","isBuffer","includes","setImmediate","normalize","envelope","getEnvelope","messageId","toString","icalEvent","encoding","normalizedHeaders","_encodeHeaderValue","list","listHeaders","_getListHeaders","entry","map","val","join","references","inReplyTo","setMailerHeader","xMailer","setHeader","setPriorityHeaders","priority","toLowerCase","setListHeaders","listHeader","addHeader","listData","trim","prepared","foldLines","url","comment","isPlainText","encodeWord","_formatListUrl","replace","filter","test","module","exports"],"sources":["/Users/waqasahmad/Desktop/CSS/Fiverr/updated-code/node_modules/nodemailer/lib/mailer/mail-message.js"],"sourcesContent":["'use strict';\n\nconst shared = require('../shared');\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\n\nclass MailMessage {\n    constructor(mailer, data) {\n        this.mailer = mailer;\n        this.data = {};\n        this.message = null;\n\n        data = data || {};\n        let options = mailer.options || {};\n        let defaults = mailer._defaults || {};\n\n        Object.keys(data).forEach(key => {\n            this.data[key] = data[key];\n        });\n\n        this.data.headers = this.data.headers || {};\n\n        // apply defaults\n        Object.keys(defaults).forEach(key => {\n            if (!(key in this.data)) {\n                this.data[key] = defaults[key];\n            } else if (key === 'headers') {\n                // headers is a special case. Allow setting individual default headers\n                Object.keys(defaults.headers).forEach(key => {\n                    if (!(key in this.data.headers)) {\n                        this.data.headers[key] = defaults.headers[key];\n                    }\n                });\n            }\n        });\n\n        // force specific keys from transporter options\n        ['disableFileAccess', 'disableUrlAccess', 'normalizeHeaderKey'].forEach(key => {\n            if (key in options) {\n                this.data[key] = options[key];\n            }\n        });\n    }\n\n    resolveContent(...args) {\n        return shared.resolveContent(...args);\n    }\n\n    resolveAll(callback) {\n        let keys = [\n            [this.data, 'html'],\n            [this.data, 'text'],\n            [this.data, 'watchHtml'],\n            [this.data, 'amp'],\n            [this.data, 'icalEvent']\n        ];\n\n        if (this.data.alternatives && this.data.alternatives.length) {\n            this.data.alternatives.forEach((alternative, i) => {\n                keys.push([this.data.alternatives, i]);\n            });\n        }\n\n        if (this.data.attachments && this.data.attachments.length) {\n            this.data.attachments.forEach((attachment, i) => {\n                if (!attachment.filename) {\n                    attachment.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n                    if (attachment.filename.indexOf('.') < 0) {\n                        attachment.filename += '.' + mimeFuncs.detectExtension(attachment.contentType);\n                    }\n                }\n\n                if (!attachment.contentType) {\n                    attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');\n                }\n\n                keys.push([this.data.attachments, i]);\n            });\n        }\n\n        let mimeNode = new MimeNode();\n\n        let addressKeys = ['from', 'to', 'cc', 'bcc', 'sender', 'replyTo'];\n\n        addressKeys.forEach(address => {\n            let value;\n            if (this.message) {\n                value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === 'replyTo' ? 'reply-to' : address)) || []);\n            } else if (this.data[address]) {\n                value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);\n            }\n            if (value && value.length) {\n                this.data[address] = value;\n            } else if (address in this.data) {\n                this.data[address] = null;\n            }\n        });\n\n        let singleKeys = ['from', 'sender'];\n        singleKeys.forEach(address => {\n            if (this.data[address]) {\n                this.data[address] = this.data[address].shift();\n            }\n        });\n\n        let pos = 0;\n        let resolveNext = () => {\n            if (pos >= keys.length) {\n                return callback(null, this.data);\n            }\n            let args = keys[pos++];\n            if (!args[0] || !args[0][args[1]]) {\n                return resolveNext();\n            }\n            shared.resolveContent(...args, (err, value) => {\n                if (err) {\n                    return callback(err);\n                }\n\n                let node = {\n                    content: value\n                };\n                if (args[0][args[1]] && typeof args[0][args[1]] === 'object' && !Buffer.isBuffer(args[0][args[1]])) {\n                    Object.keys(args[0][args[1]]).forEach(key => {\n                        if (!(key in node) && !['content', 'path', 'href', 'raw'].includes(key)) {\n                            node[key] = args[0][args[1]][key];\n                        }\n                    });\n                }\n\n                args[0][args[1]] = node;\n                resolveNext();\n            });\n        };\n\n        setImmediate(() => resolveNext());\n    }\n\n    normalize(callback) {\n        let envelope = this.data.envelope || this.message.getEnvelope();\n        let messageId = this.message.messageId();\n\n        this.resolveAll((err, data) => {\n            if (err) {\n                return callback(err);\n            }\n\n            data.envelope = envelope;\n            data.messageId = messageId;\n\n            ['html', 'text', 'watchHtml', 'amp'].forEach(key => {\n                if (data[key] && data[key].content) {\n                    if (typeof data[key].content === 'string') {\n                        data[key] = data[key].content;\n                    } else if (Buffer.isBuffer(data[key].content)) {\n                        data[key] = data[key].content.toString();\n                    }\n                }\n            });\n\n            if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {\n                data.icalEvent.content = data.icalEvent.content.toString('base64');\n                data.icalEvent.encoding = 'base64';\n            }\n\n            if (data.alternatives && data.alternatives.length) {\n                data.alternatives.forEach(alternative => {\n                    if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {\n                        alternative.content = alternative.content.toString('base64');\n                        alternative.encoding = 'base64';\n                    }\n                });\n            }\n\n            if (data.attachments && data.attachments.length) {\n                data.attachments.forEach(attachment => {\n                    if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {\n                        attachment.content = attachment.content.toString('base64');\n                        attachment.encoding = 'base64';\n                    }\n                });\n            }\n\n            data.normalizedHeaders = {};\n            Object.keys(data.headers || {}).forEach(key => {\n                let value = [].concat(data.headers[key] || []).shift();\n                value = (value && value.value) || value;\n                if (value) {\n                    if (['references', 'in-reply-to', 'message-id', 'content-id'].includes(key)) {\n                        value = this.message._encodeHeaderValue(key, value);\n                    }\n                    data.normalizedHeaders[key] = value;\n                }\n            });\n\n            if (data.list && typeof data.list === 'object') {\n                let listHeaders = this._getListHeaders(data.list);\n                listHeaders.forEach(entry => {\n                    data.normalizedHeaders[entry.key] = entry.value.map(val => (val && val.value) || val).join(', ');\n                });\n            }\n\n            if (data.references) {\n                data.normalizedHeaders.references = this.message._encodeHeaderValue('references', data.references);\n            }\n\n            if (data.inReplyTo) {\n                data.normalizedHeaders['in-reply-to'] = this.message._encodeHeaderValue('in-reply-to', data.inReplyTo);\n            }\n\n            return callback(null, data);\n        });\n    }\n\n    setMailerHeader() {\n        if (!this.message || !this.data.xMailer) {\n            return;\n        }\n        this.message.setHeader('X-Mailer', this.data.xMailer);\n    }\n\n    setPriorityHeaders() {\n        if (!this.message || !this.data.priority) {\n            return;\n        }\n        switch ((this.data.priority || '').toString().toLowerCase()) {\n            case 'high':\n                this.message.setHeader('X-Priority', '1 (Highest)');\n                this.message.setHeader('X-MSMail-Priority', 'High');\n                this.message.setHeader('Importance', 'High');\n                break;\n            case 'low':\n                this.message.setHeader('X-Priority', '5 (Lowest)');\n                this.message.setHeader('X-MSMail-Priority', 'Low');\n                this.message.setHeader('Importance', 'Low');\n                break;\n            default:\n            // do not add anything, since all messages are 'Normal' by default\n        }\n    }\n\n    setListHeaders() {\n        if (!this.message || !this.data.list || typeof this.data.list !== 'object') {\n            return;\n        }\n        // add optional List-* headers\n        if (this.data.list && typeof this.data.list === 'object') {\n            this._getListHeaders(this.data.list).forEach(listHeader => {\n                listHeader.value.forEach(value => {\n                    this.message.addHeader(listHeader.key, value);\n                });\n            });\n        }\n    }\n\n    _getListHeaders(listData) {\n        // make sure an url looks like <protocol:url>\n        return Object.keys(listData).map(key => ({\n            key: 'list-' + key.toLowerCase().trim(),\n            value: [].concat(listData[key] || []).map(value => ({\n                prepared: true,\n                foldLines: true,\n                value: []\n                    .concat(value || [])\n                    .map(value => {\n                        if (typeof value === 'string') {\n                            value = {\n                                url: value\n                            };\n                        }\n\n                        if (value && value.url) {\n                            if (key.toLowerCase().trim() === 'id') {\n                                // List-ID: \"comment\" <domain>\n                                let comment = value.comment || '';\n                                if (mimeFuncs.isPlainText(comment)) {\n                                    comment = '\"' + comment + '\"';\n                                } else {\n                                    comment = mimeFuncs.encodeWord(comment);\n                                }\n\n                                return (value.comment ? comment + ' ' : '') + this._formatListUrl(value.url).replace(/^<[^:]+\\/{,2}/, '');\n                            }\n\n                            // List-*: <http://domain> (comment)\n                            let comment = value.comment || '';\n                            if (!mimeFuncs.isPlainText(comment)) {\n                                comment = mimeFuncs.encodeWord(comment);\n                            }\n\n                            return this._formatListUrl(value.url) + (value.comment ? ' (' + comment + ')' : '');\n                        }\n\n                        return '';\n                    })\n                    .filter(value => value)\n                    .join(', ')\n            }))\n        }));\n    }\n\n    _formatListUrl(url) {\n        url = url.replace(/[\\s<]+|[\\s>]+/g, '');\n        if (/^(https?|mailto|ftp):/.test(url)) {\n            return '<' + url + '>';\n        }\n        if (/^[^@]+@[^@]+$/.test(url)) {\n            return '<mailto:' + url + '>';\n        }\n\n        return '<http://' + url + '>';\n    }\n}\n\nmodule.exports = MailMessage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}